import aiosqlite
import datetime
import pytz


# –ø—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å—Ç—å –ª–∏ –≤ –±–∞–∑–µ - –µ—Å—Ç—å (—Å–æ–≤–º–µ—â–µ–Ω–æ —Å–æ –≤—Ç–æ—Ä—ã–º)
# –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑—É –Ω–æ–≤–æ–≥–æ —á–µ–ª–µ–ø–∏–∑–¥—Ä–∏–∫–∞ - –µ—Å—Ç—å
# –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
# –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö —á–µ–ª–æ–≤–µ–∫–∞ –ø–æ –µ–≥–æ –∞–π–¥–∏


async def add_to_db(tg_id, tg_nick=None) -> bool:
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –µ–µ, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    async with aiosqlite.connect('db.db') as conn:
        cursor = await conn.cursor()

        # SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
        insert_query = """
        INSERT INTO users (tg_id, tg_nick)
        VALUES (?, ?)
        """

        try:
            await cursor.execute(insert_query, (tg_id, tg_nick))
            await conn.commit()
            return True  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True, –µ—Å–ª–∏ –¥–æ–±–∞–≤–∏–ª–∏
        except aiosqlite.IntegrityError:
            await conn.commit()
            return False  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º False, –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å


async def add_transactions_to_bd(tg_id, category, summ) -> bool:
    async with aiosqlite.connect('db.db') as conn:
        date = datetime.datetime.now(pytz.timezone('Europe/Moscow')).strftime("%Y-%m-%d %H:%M:%S %Z")[:-4]
        cursor = await conn.cursor()

        # SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
        insert_query = """
        INSERT INTO transactions ([tg id], category, summ, date)
        VALUES (?, ?, ?, ?)
        """

        try:
            await cursor.execute(insert_query, (tg_id, refactor_category(category), summ, date))

            await conn.commit()
            await update_user_summ(tg_id, refactor_category(category), summ)
            return True  # –µ—Å–ª–∏ –≤—Å—ë —á–µ—Ç–∫–æ
        except aiosqlite.IntegrityError as e:
            await conn.commit()
            return False  # –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å


async def update_user_summ(tg_id, category, summ) -> ():
    async with aiosqlite.connect('db.db') as conn:
        cursor = await conn.cursor()

        # SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
        update_query = f"""
        UPDATE users
        SET {category} = {category} + ?,
            summ = summ + ?
        WHERE tg_id = ?
        """

        try:
            await cursor.execute(update_query, (summ, summ, tg_id))
            await conn.commit()
            return get_user_data(tg_id)  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        except aiosqlite.IntegrityError as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")


async def get_user_data(tg_id):
    async with aiosqlite.connect('db.db') as conn:
        cursor = await conn.cursor()

        # SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—ã–±–æ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ tg_id
        select_query = """
        SELECT * FROM users
        WHERE tg_id = ?
        """

        try:
            await cursor.execute(select_query, (tg_id,))
            user_data = await cursor.fetchone()  # –ü–æ–ª—É—á–∞–µ–º –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            return user_data  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        except aiosqlite.Error as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return None


async def get_transactions(tg_id) -> list:
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    async with aiosqlite.connect('db.db') as db:
        # –°–æ–∑–¥–∞–µ–º –∫—É—Ä—Å–æ—Ä
        cursor = await db.cursor()

        # –í—ã–ø–æ–ª–Ω—è–µ–º SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—ã–±–æ—Ä–∫–∏ –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ tg_id
        await cursor.execute('SELECT * FROM transactions WHERE [tg id] = ?', (tg_id,))

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        transactions = list(await cursor.fetchall())

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        return transactions


def refactor_category(category):
    print(category)
    if category == 'üçü M–∞–∫':
        return 'vit'
    elif category == 'üêî KFC':
        return 'kfc'
    elif category == 'üçî –ë–ö':
        return 'bk'
    elif category == 'üçïü•¶ü•û –î—Ä—É–≥–æ–µ':
        return 'other'
    else:
        raise ValueError("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è")


def reverse_refactor_category(category):
    print(category)
    if category == 'vit':
        return 'üçü M–∞–∫'
    elif category == 'kfc':
        return 'üêî KFC'
    elif category == 'bk':
        return 'üçî –ë–ö'
    elif category == 'other':
        return 'üçïü•¶ü•û –î—Ä—É–≥–æ–µ'
    else:
        raise ValueError("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è")


def transactions_to_list(transactions):
    new_transaction = ''
    for transaction in transactions:
        new_transaction += transaction[:2]
        new_transaction += reverse_refactor_category(transaction[2])
        new_transaction += transaction[2:]
        new_transaction += '\n'
    return new_transaction


def is_number(value):
    try:
        float(value)  # –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ
        return True
    except ValueError:
        return False
